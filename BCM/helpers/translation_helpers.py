import simplejson as json
import re

from django.conf import settings
from django.utils.translation import get_language


def get_current_language(default_language='en'):
    current_language = get_language()
    # get_language can return language in the following format: 'en-us'
    if current_language and '-' in current_language:
        current_language = current_language[0:current_language.find('-')]
        current_language = current_language.lower()

    return current_language if current_language else default_language


class TranslatedFieldsMixin:
    """
    Helper mixin class to allow direct assigning translated fields,
    source json field should end with '_i18n'.

    Provides the following properties:
    - self.label_i18n: db field
    - self.label: autogenerated getter/setter by a current django language
    - self.label_fr: autogenerated getter/setter for French
    """

    _default_language = 'en'
    _translated_field_suffix = '_i18n'
    _translated_field_names = None
    _json_prettify = True
    _debug = False

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._translated_field_names = self.get_translated_field_names()

    def get_translated_field_names(self):
        return [
            item.name for item in self._meta.fields
            if item.name.endswith(self._translated_field_suffix)
        ]

    def parse_attribute_name(self, key):
        """
        Returns an original attribute name and a required language slug
        """

        # remove language part
        original_name = re.sub('_([a-z]{2})$', self._translated_field_suffix, key)

        if original_name == key:
            # for example required field is self.label (without a language)
            original_name += self._translated_field_suffix
            language_slug = self.get_current_language()
        else:
            # for example required field is self.label_fr
            language_slug = key.split('_')[-1]

        return original_name, language_slug

    def get_current_language(self):
        return get_current_language(default_language=self._default_language)

    def dump_json(self, json_content):
        """
        Hook to prettify JSON values
        """

        if self._json_prettify:
            return json.dumps(json_content, indent=4)
        else:
            return json.dumps(json_content)

    def get_field_value(self, field_json, language):
        """
        Retrieve a value from json field, or fallback to "settings.FALLBACK_LANGUAGES"
        in case of a missing language value
        """

        value = field_json.get(language, field_json.get('en', '???'))
        return value

        #if language in field_json:
        #    # it's possible to have {'en': '', 'fr': 'value 1'}
        #    # empty result has a higher priority even if it's empty
        #    return value
        #
        #for fallback_language, languages in settings.FALLBACK_LANGUAGES.items():
        #    if language in languages:
        #        return field_json.get(fallback_language)

    def get_translated_attribute(self, key):
        """

        :param key:
        :return:
        """
        original_name, field_language = self.parse_attribute_name(key)
        if original_name in self._translated_field_names:
            try:
                original_field_json = json.loads(getattr(self, original_name) or '{}')
            except ValueError:
                original_field_json = {}
            return self.get_field_value(original_field_json, field_language)
        else:
            return object.__getattribute__(self, key)

    def set_translated_attribute(self, key, value):
        """

        :param key:
        :param value:
        :return:
        """

        original_name, field_language = self.parse_attribute_name(key)
        if self._translated_field_names and original_name in self._translated_field_names:
            try:
                json_content = json.loads(getattr(self, original_name) or '{}')
            except ValueError:
                json_content = {}
            json_content[field_language] = value
            self.__dict__[original_name] = self.dump_json(json_content)

    def __getattr__(self, key):
        """
        Catch non-existent field names and return translated variant.

        :param item:
        :return: generated value
        """

        if self._debug:
            print(f'TranslatedModelMixin.__getattr__ is called for: {key}')

        if hasattr(super(), '__getattr__'):
            try:
                result = super().__getattr__(key)
            except AttributeError as error:
                result = self.get_translated_attribute(key)
        else:
            result = self.get_translated_attribute(key)

        return result

    def __setattr__(self, key, value):
        """
        Catch non-existent field names and set translated variant to parent translated field.
        :param key:
        :param value:
        :return:
        """

        self.set_translated_attribute(key, value)
        super().__setattr__(key, value)
